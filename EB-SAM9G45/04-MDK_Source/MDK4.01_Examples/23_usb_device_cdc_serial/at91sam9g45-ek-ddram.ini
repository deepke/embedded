// ----------------------------------------------------------------------------
//         ATMEL Microcontroller Software Support 
// ----------------------------------------------------------------------------
// Copyright (c) 2008, Atmel Corporation
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
// this list of conditions and the disclaimer below.
//
// Atmel's name may not be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
// DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ----------------------------------------------------------------------------

//----------------------------------------------------------------------------
//  File Name           : at91sam9g45-ek-ddram.ini
//  Object              : Generic Macro File for KEIL
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// _MapRAMAt0()
// Function description: Maps RAM at 0.
//----------------------------------------------------------------------------

DEFINE LONG  hold;
DEFINE LONG tempVal;

FUNC void _MapRAMAt0(){
	
    printf ("Changing mapping: RAM mapped to 0\n");
    // Test and set Remap
    hold = _RDWORD(0x00000000);
    _WDWORD(0x00000000,0xAAAAAAAA);
    if(_RDWORD(0x00000000) != 0xAAAAAAAA)
    {
        _WDWORD(0xFFFFED00,0x03);    // toggle remap bits
    }
    else
    {
        _WDWORD(0x00000000,hold);
    }
}


//----------------------------------------------------------------------------
// _InitRSTC()
// Function description
//   Initializes the RSTC (Reset controller).
//   This makes sense since the default is to not allow user resets, which makes it impossible to
//   apply a second RESET via J-Link
//----------------------------------------------------------------------------

FUNC void _InitRSTC() {
    _WDWORD(0xFFFFFD08,0xA5000001);    // Allow user reset
}

//----------------------------------------------------------------------------
//
//  _PllSetting()
//  Function description
//  Initializes the PMC.
//  1. Enable the Main Oscillator
//  2. Configure PLL
//  3. Switch Master
//----------------------------------------------------------------------------

FUNC void __PllSetting() 
{  
	//* pPmc->PMC_MOR = (( AT91C_CKGR_OSCOUNT & (0x40 <<8) | AT91C_CKGR_MOSCEN ));
    _WDWORD(0xFFFFFC20,0x00004001);
    _sleep_(100);
	//*   AT91C_BASE_CKGR->CKGR_PLLAR = (AT91C_CKGR_SRCA | ((199 << 16) & AT91C_CKGR_MULA) | 
	//    (AT91C_CKGR_PLLACOUNT | (AT91C_CKGR_OUTA_0 | (3);
    _WDWORD(0xFFFFFC28,0x20C73F03);
    _sleep_(100);
    // Configure PLLB
    _WDWORD(0xFFFFFC2C,0x207C3F0C);
    _sleep_(100);
	//*   AT91C_BASE_PMC->PMC_MCKR = BOARD_PRESCALER;
    _WDWORD(0xFFFFFC30,0x00001300);
     _sleep_(100);
    //*   AT91C_BASE_PMC->PMC_MCKR |= AT91C_PMC_CSS_PLLA_CLK;  
    _WDWORD(0xFFFFFC30,0x00001302);
     _sleep_(100);
}



//----------------------------------------------------------------------------
//      __initDDRAM()
//  Function description
//  Configuring the MICRON DDRAM controller
//----------------------------------------------------------------------------

FUNC void __initDDRAM()
{
     printf( "-------------------------------Configuring the DDRAM controller------------\n");
    printf( "-------------------------------MICRON DDRAM configuration------------------\n");
    // 0xFFFFE600 DDR2C Base Address

    // Enable DDR2 clock x2 in PMC
    // AT91C_BASE_PMC, PMC_SCER, AT91C_PMC_DDR
    
    _WDWORD(0xFFFFFC00,0x04);    
    
     
    // -----------------------Step 1------------------- 
    // Program the memory device type
    // ------------------------------------------------ 
    
    // Configure the DDR controller
    // HDDRSDRC2_MDR, AT91C_DDRC2_DBW_16_BITS   |     // 16-bit DDR
    // AT91C_DDRC2_MD_DDR2_SDRAM       // DDR2
    _WDWORD(0xFFFFE620,0x16);
    
    // -----------------------Step 2------------------- 
    // 1. Program the features of DDR2-SDRAM device into 
    //    the Configuration Register.
    // 2. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T0PR.    
    // 3. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T1PR.
    // 4. Program the features of DDR2-SDRAM device into 
    //    the Timing Register HDDRSDRC2_T2PR.
    // ------------------------------------------------ 
    
    // HDDRSDRC2_CR, AT91C_DDRC2_NC_DDR10_SDR9  |     // 10 column bits (1K) 
    //          AT91C_DDRC2_NR_14          |          // 14 row bits    (8K) 
    //          AT91C_DDRC2_CAS_3          |          // CAS Latency 3
    //          AT91C_DDRC2_DLL_RESET_DISABLED        // DLL not reset
    _WDWORD(0xFFFFE608,0x3D);
    
    // assume timings for 7.5ns min clock period
    // HDDRSDRC2_T0PR, AT91C_DDRC2_TRAS_6       |     //  6 * 7.5 = 45   ns
    //            AT91C_DDRC2_TRCD_2            |     //  3 * 7.5 = 22.5 ns
    //            AT91C_DDRC2_TWR_2             |     //  2 * 7.5 = 15   ns
    //            AT91C_DDRC2_TRC_8             |     // 10 * 7.5 = 75   ns
    //            AT91C_DDRC2_TRP_2             |     //  3 * 7.5 = 22.5 ns
    //            AT91C_DDRC2_TRRD_1            |     //  2 * 7.5 = 15   ns
    //            AT91C_DDRC2_TWTR_1            |     //  1 clock cycle
    //            AT91C_DDRC2_TMRD_2                  //  2 clock cycles
    _WDWORD(0xFFFFE60C,0x21128226);

    // HDDRSDRC2_T1PR, AT91C_DDRC2_TXP_2  |           //  2 * 7.5 = 15 ns
    //                 200 << 16          |           // 200 clock cycles, TXSRD: Exit self refresh delay to Read command
    //                 16 << 8            |           // 16 * 7.5 = 120 ns TXSNR: Exit self refresh delay to non read command
    //                 AT91C_DDRC2_TRFC_14 << 0       // 14 * 7.5 = 105 ns (must be 105 ns for 512Mb DDR)
    _WDWORD(0xFFFFE610,0x02C8100E);

    // HDDRSDRC2_T2PR, AT91C_DDRC2_TRTP_1   |         //  1 * 7.5 = 8 ns
    //                 AT91C_DDRC2_TRPA_0   |         //  0 * 7.5 = 0 ns
    //                 AT91C_DDRC2_TXARDS_7 |         //  7 clock cycles
    //                 AT91C_DDRC2_TXARD_2            //  2 clock cycles
    _WDWORD(0xFFFFE614,0x1072);
    
    // -----------------------Step 3------------------- 
    // An NOP command is issued to the DDR2-SDRAM to 
    // enable clock.
    // ------------------------------------------------ 

    _WDWORD(0xFFFFE600,0x1);
    _WDWORD(0x70000000,0x0);
    // A minimum pause of 200 ¦Ìs is provided to precede any signal toggle.
    _sleep_(2);
    // Now clocks which drive DDR2-SDRAM device are enabled
    
    // -----------------------Step 4------------------- 
    // An NOP command is issued to the DDR2-SDRAM 
    // ------------------------------------------------ 
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NOP_CMD  
    _WDWORD(0xFFFFE600,0x1);
    _WDWORD(0x70000000,0x0);
    // wait 400 ns min
    _sleep_(1);
    // Now CKE is driven high.    
  
    // -----------------------Step 5------------------- 
    // An all banks precharge command is issued to the 
    // DDR2-SDRAM.
    // ------------------------------------------------ 
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD  
    _WDWORD(0xFFFFE600,0x2);
    _WDWORD(0x70000000,0x0);
    // wait 400 ns min
    _sleep_(1);

    // -----------------------Step 6------------------- 
    // An Extended Mode Register set (EMRS2) cycle is 
    // issued to chose between commercialor high 
    // temperature operations
    // ------------------------------------------------ 
   
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    _WDWORD(0xFFFFE600,0x5);
    _WDWORD(0x74000000,0x0); // The write address must be chosen so that BA[1] is set to 1 and BA[0] are set to 0.
    // wait 2 cycles min
    _sleep_(1);
    
    
    
    // -----------------------Step 7------------------- 
    // An Extended Mode Register set (EMRS3) cycle is 
    // issued to set all registers to 0.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    _WDWORD(0xFFFFE600,0x5);
    _WDWORD(0x76000000,0x0);
    // wait 2 cycles min
    _sleep_(1);

    // -----------------------Step 8------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to enable DLL.
    // ------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    _WDWORD(0xFFFFE600,0x5);
    _WDWORD(0x72000000,0x0); // The write address must be chosen so that BA[1] and BA[0] are set to 0.
    // An additional 200 cycles of clock are required for locking DLL
    _sleep_(2);

    // -----------------------Step 9------------------- 
    // Program DLL field into the Configuration Register.
    // -------------------------------------------------
    
    // HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED
    tempVal = _RDWORD(0xFFFFE608); 
    tempVal |= 0xBD;
    _WDWORD(0xFFFFE608,tempVal);
    
    // -----------------------Step 10------------------- 
    // A Mode Register set (MRS) cycle is issued to reset
    // DLL.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
     
    _WDWORD(0xFFFFE600,0x3);
    _WDWORD(0x70000000,0x0); // The write address must be chosen so that BA[1:0] bits are set to 0.
    // wait 2 cycles min
    _sleep_(1);
    
    // -----------------------Step 11------------------- 
    // An all banks precharge command is issued to the 
    // DDR2-SDRAM.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    _WDWORD(0xFFFFE600,0x2);
    _WDWORD(0x70000000,0x0);  // Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    // wait 2 cycles min
    _sleep_(1);

    // -----------------------Step 12------------------- 
    // Two auto-refresh (CBR) cycles are provided. 
    // Program the auto refresh command (CBR) into the 
    // Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    _WDWORD(0xFFFFE600,0x4);
    _WDWORD(0x70000000,0x0);  // Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    // wait 2 cycles min
    _sleep_(1);
    // Set 2nd CBR
    _WDWORD(0xFFFFE600,0x4);
    _WDWORD(0x70000000,0x0);  // Perform a write access to any DDR2-SDRAM address to acknowledge this command.
    // wait 2 cycles min
    _sleep_(1);
  
    // -----------------------Step 13------------------- 
    // Program DLL field into the Configuration Register
    // to low(Disable DLL reset).
    // -------------------------------------------------
    // HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED)  
    tempVal = _RDWORD(0xFFFFE608); 
    tempVal &= 0xFFFFFF7F;
    _WDWORD(0xFFFFE608,tempVal);

    // -----------------------Step 14------------------- 
    // A Mode Register set (MRS) cycle is issued to 
    // program the parameters of the DDR2-SDRAM devices
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    _WDWORD(0xFFFFE600,0x3);
    _WDWORD(0x70000000,0x0); // The write address must be chosen so that BA[1:0] are set to 0.
    // wait 2 cycles min
    _sleep_(1);
    
    // -----------------------Step 15------------------- 
    // Program OCD field into the Configuration Register
    // to high (OCD calibration default)
    // -------------------------------------------------
    tempVal = _RDWORD(0xFFFFE608); 
    tempVal |= (0x07 << 12);
    _WDWORD(0xFFFFE608,tempVal);
    
    // -----------------------Step 16------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to OCD default value.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    _WDWORD(0xFFFFE600,0x5);
    _WDWORD(0x72000000,0x0); // The write address must be chosen so that BA[1] is set to 0 and BA[0] is set to 1.
    // wait 2 cycles min
    _sleep_(1);

    // -----------------------Step 17------------------- 
    // Program OCD field into the Configuration Register 
    // to low (OCD calibration mode exit).
    // -------------------------------------------------
    tempVal = _RDWORD(0xFFFFE608); 
    tempVal &= 0xFFFF8FFF;
    _WDWORD(0xFFFFE608,tempVal);
    
    // -----------------------Step 18------------------- 
    // An Extended Mode Register set (EMRS1) cycle is 
    // issued to enable OCD exit.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    _WDWORD(0xFFFFE600,0x5);
    _WDWORD(0x76000000,0x0); // The write address must be chosen so that BA[1] is set to 1 and BA[0] is set to 1.
    // wait 2 cycles min
    _sleep_(1);
    
    
    // -----------------------Step 19,20------------------- 
    // A mode Normal command is provided. Program the 
    // Normal mode into Mode Register.
    // -------------------------------------------------
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD
    _WDWORD(0xFFFFE600,0x0);
    _WDWORD(0x70000000,0x0);  // Perform a write access to any DDR2-SDRAM address.
     // wait 2 cycles min
    _sleep_(1);
    
    // -----------------------Step 21------------------- 
    // Write the refresh rate into the count field in the 
    // Refresh Timer register. The DDR2-SDRAM device requires a
    // refresh every 15.625 ¦Ìs or 7.81 ¦Ìs. With a 100 
    // MHz frequency, the refresh timer count register must to 
    // be set with (15.625 /100 MHz) = 1562 i.e. 0x061A or 
    // (7.81 /100MHz) = 781 i.e. 0x030d
    // -------------------------------------------------
    // HDDRSDRC2_RTR, 0x0000024B
    _WDWORD(0xFFFFE604,0x0000024B);
    
    // Read optimization" shall be un-selected on this revision.
    _WDWORD(0xFFFFE62C,0x04);
    
    // OK now we are ready to work on the DDRSDR

    // wait for end of calibration
    _sleep_(1);

    printf( "------------------------------- DDRAM configuration done -------------------------------\n");


}


__PllSetting();                   //* Init PLL
__initDDRAM();
_MapRAMAt0();                     //* Set the RAM memory at 0x00300000 & 0x0000 0000
_InitRSTC();   
LOAD RUN_IN_DDRAM\usb_device_cdc_serial.axf INCREMENTAL
PC = 0x70000000;
g,main

